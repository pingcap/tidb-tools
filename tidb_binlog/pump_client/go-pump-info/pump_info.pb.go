// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pump_info.proto

/*
	Package pump_info is a generated protocol buffer package.

	It is generated from these files:
		pump_info.proto

	It has these top-level messages:
		PumpStatus
*/
package pump_info

import (
	"fmt"

	proto "github.com/golang/protobuf/proto"

	math "math"

	io "io"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PumpState int32

const (
	// Online means the pump can receive request.
	PumpState_Online PumpState = 0
	// Pausing means the pump is pausing.
	PumpState_Pausing PumpState = 1
	// Paused means the pump is already paused.
	PumpState_Paused PumpState = 2
	// Closing means the pump is closing, and the state will be Offline when closed.
	PumpState_Closing PumpState = 3
	// ForceClosing means the pump is closing by force.
	PumpState_ForceClosing PumpState = 4
	// Offline means the pump is offline, and will not provide service.
	PumpState_Offline PumpState = 5
)

var PumpState_name = map[int32]string{
	0: "Online",
	1: "Pausing",
	2: "Paused",
	3: "Closing",
	4: "ForceClosing",
	5: "Offline",
}
var PumpState_value = map[string]int32{
	"Online":       0,
	"Pausing":      1,
	"Paused":       2,
	"Closing":      3,
	"ForceClosing": 4,
	"Offline":      5,
}

func (x PumpState) Enum() *PumpState {
	p := new(PumpState)
	*p = x
	return p
}
func (x PumpState) String() string {
	return proto.EnumName(PumpState_name, int32(x))
}
func (x *PumpState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PumpState_value, data, "PumpState")
	if err != nil {
		return err
	}
	*x = PumpState(value)
	return nil
}
func (PumpState) EnumDescriptor() ([]byte, []int) { return fileDescriptorPumpInfo, []int{0} }

type PumpStatus struct {
	// the id of pump.
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId" json:"node_id"`
	// the state of pump.
	State PumpState `protobuf:"varint,2,opt,name=State,enum=pump.info.PumpState" json:"State"`
	// the score of pump, it is report by pump, calculated by pump's qps, disk usage and binlog's data size.
	// if Score is less than 0, means the pump is useless.
	Score *int64 `protobuf:"varint,3,opt,name=Score" json:"Score,omitempty"`
	// the label of this pump, pump client will only send to a pump which label is matched.
	Label            string `protobuf:"bytes,4,opt,name=Label" json:"Label"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PumpStatus) Reset()                    { *m = PumpStatus{} }
func (m *PumpStatus) String() string            { return proto.CompactTextString(m) }
func (*PumpStatus) ProtoMessage()               {}
func (*PumpStatus) Descriptor() ([]byte, []int) { return fileDescriptorPumpInfo, []int{0} }

func (m *PumpStatus) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *PumpStatus) GetState() PumpState {
	if m != nil {
		return m.State
	}
	return PumpState_Online
}

func (m *PumpStatus) GetScore() int64 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

func (m *PumpStatus) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func init() {
	proto.RegisterType((*PumpStatus)(nil), "pump.info.PumpStatus")
	proto.RegisterEnum("pump.info.PumpState", PumpState_name, PumpState_value)
}
func (m *PumpStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PumpStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintPumpInfo(dAtA, i, uint64(len(m.NodeId)))
	i += copy(dAtA[i:], m.NodeId)
	dAtA[i] = 0x10
	i++
	i = encodeVarintPumpInfo(dAtA, i, uint64(m.State))
	if m.Score != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPumpInfo(dAtA, i, uint64(*m.Score))
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintPumpInfo(dAtA, i, uint64(len(m.Label)))
	i += copy(dAtA[i:], m.Label)
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintPumpInfo(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PumpStatus) Size() (n int) {
	var l int
	_ = l
	l = len(m.NodeId)
	n += 1 + l + sovPumpInfo(uint64(l))
	n += 1 + sovPumpInfo(uint64(m.State))
	if m.Score != nil {
		n += 1 + sovPumpInfo(uint64(*m.Score))
	}
	l = len(m.Label)
	n += 1 + l + sovPumpInfo(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPumpInfo(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPumpInfo(x uint64) (n int) {
	return sovPumpInfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PumpStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPumpInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PumpStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PumpStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPumpInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPumpInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPumpInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (PumpState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPumpInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Score = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPumpInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPumpInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPumpInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPumpInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPumpInfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPumpInfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPumpInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPumpInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPumpInfo
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPumpInfo
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPumpInfo(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPumpInfo = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPumpInfo   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("pump_info.proto", fileDescriptorPumpInfo) }

var fileDescriptorPumpInfo = []byte{
	// 249 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2f, 0x28, 0xcd, 0x2d,
	0x88, 0xcf, 0xcc, 0x4b, 0xcb, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x04, 0x09, 0xe8,
	0x81, 0x04, 0xa4, 0x44, 0xd2, 0xf3, 0xd3, 0xf3, 0xc1, 0xa2, 0xfa, 0x20, 0x16, 0x44, 0x81, 0x52,
	0x3f, 0x23, 0x17, 0x57, 0x40, 0x69, 0x6e, 0x41, 0x70, 0x49, 0x62, 0x49, 0x69, 0xb1, 0x90, 0x2c,
	0x17, 0x7b, 0x5e, 0x7e, 0x4a, 0x6a, 0x7c, 0x66, 0x8a, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0xa7, 0x13,
	0xcb, 0x89, 0x7b, 0xf2, 0x0c, 0x41, 0x6c, 0x20, 0x41, 0xcf, 0x14, 0x21, 0x03, 0x2e, 0x56, 0x90,
	0xc2, 0x54, 0x09, 0x26, 0x05, 0x46, 0x0d, 0x3e, 0x23, 0x11, 0x3d, 0xb8, 0xf1, 0x7a, 0x30, 0x43,
	0x52, 0xa1, 0x5a, 0x20, 0x0a, 0x85, 0x44, 0xb8, 0x58, 0x83, 0x93, 0xf3, 0x8b, 0x52, 0x25, 0x98,
	0x15, 0x18, 0x35, 0x98, 0x83, 0x20, 0x1c, 0x21, 0x29, 0x2e, 0x56, 0x9f, 0xc4, 0xa4, 0xd4, 0x1c,
	0x09, 0x16, 0x24, 0x4b, 0x20, 0x42, 0x5a, 0x31, 0x5c, 0x9c, 0x70, 0xb3, 0x84, 0xb8, 0xb8, 0xd8,
	0xfc, 0xf3, 0x72, 0x32, 0xf3, 0x52, 0x05, 0x18, 0x84, 0xb8, 0xb9, 0xd8, 0x03, 0x12, 0x4b, 0x8b,
	0x33, 0xf3, 0xd2, 0x05, 0x18, 0x41, 0x12, 0x20, 0x4e, 0x6a, 0x8a, 0x00, 0x13, 0x48, 0xc2, 0x39,
	0x27, 0x1f, 0x2c, 0xc1, 0x2c, 0x24, 0xc0, 0xc5, 0xe3, 0x96, 0x5f, 0x94, 0x9c, 0x0a, 0x13, 0x61,
	0x01, 0x49, 0xfb, 0xa7, 0xa5, 0x81, 0x0d, 0x61, 0x75, 0x12, 0x38, 0xf1, 0x48, 0x8e, 0xf1, 0xc2,
	0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18, 0x67, 0x3c, 0x96, 0x63, 0x00, 0x04, 0x00, 0x00, 0xff,
	0xff, 0x02, 0x83, 0x64, 0x10, 0x34, 0x01, 0x00, 0x00,
}
