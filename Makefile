.PHONY: build importer checker dump_region binlogctl sync_diff_inspector test check deps

# Ensure GOPATH is set before running build process.
ifeq "$(GOPATH)" ""
	$(error Please set the environment variable GOPATH before running `make`)
endif


CURDIR := $(shell pwd)
path_to_add := $(addsuffix /bin,$(subst :,/bin:,$(GOPATH)))
export PATH := $(path_to_add):$(PATH)


LDFLAGS += -X "github.com/pingcap/tidb-tools/pkg/utils.Version=1.0.0~rc2+git.$(shell git rev-parse --short HEAD)"
LDFLAGS += -X "github.com/pingcap/tidb-tools/pkg/utils.BuildTS=$(shell date -u '+%Y-%m-%d %I:%M:%S')"
LDFLAGS += -X "github.com/pingcap/tidb-tools/pkg/utils.GitHash=$(shell git rev-parse HEAD)"

CURDIR   := $(shell pwd)
GO       := GO15VENDOREXPERIMENT="1" GO111MODULE=on go
GOTEST   := CGO_ENABLED=1 $(GO) test -p 3
PACKAGES := $$(go list ./... | grep -vE 'vendor')
FILES     := $$(find . -name '*.go' -type f | grep -vE 'vendor')
VENDOR_TIDB := vendor/github.com/pingcap/tidb


build: check test importer checker dump_region binlogctl sync_diff_inspector

importer: parserlib
	$(GO) build -ldflags '$(LDFLAGS)' -mod=vendor -o bin/importer ./importer

checker: parserlib
	$(GO) build -ldflags '$(LDFLAGS)' -mod=vendor -o bin/checker ./checker

dump_region: parserlib
	$(GO) build -ldflags '$(LDFLAGS)' -mod=vendor -o bin/dump_region ./dump_region

binlogctl: parserlib
	$(GO) build -ldflags '$(LDFLAGS)' -mod=vendor -o bin/binlogctl ./tidb_binlog/binlogctl

sync_diff_inspector: parserlib
	$(GO) build -ldflags '$(LDFLAGS)' -mod=vendor -o bin/sync_diff_inspector ./sync_diff_inspector

test: parserlib
	@export log_level=error; \
	$(GOTEST) -cover $(PACKAGES) -mod=vendor

fmt:
	go fmt ./...
	@goimports -w $(FILES)

check:
	go get github.com/golang/lint/golint
	@echo "vet"
	@ go tool vet $(FILES) 2>&1 | awk '{print} END{if(NR>0) {exit 1}}'
	@echo "vet --shadow"
	@ go tool vet --shadow $(FILES) 2>&1 | awk '{print} END{if(NR>0) {exit 1}}'
	#@echo "golint"
	#@ golint ./... 2>&1 | grep -vE '\.pb\.go' | grep -vE 'vendor' | awk '{print} END{if(NR>0) {exit 1}}'
	@echo "gofmt (simplify)"
	@ gofmt -s -l -w $(FILES) 2>&1 | awk '{print} END{if(NR>0) {exit 1}}'

update:
	make vendor

goyacc:
	$(GO) get github.com/pingcap/tidb/parser/goyacc

parser: goyacc
	goyacc -o /dev/null $(VENDOR_TIDB)/parser/parser.y
	goyacc -o $(VENDOR_TIDB)/parser/parser.go $(VENDOR_TIDB)/parser/parser.y 2>&1 | egrep "(shift|reduce)/reduce" | awk '{print} END {if (NR > 0) {print "Find conflict in parser.y. Please check y.output for more information."; exit 1;}}'
	rm -f y.output

	@if [ $(ARCH) = $(LINUX) ]; \
	then \
		sed -i -e 's|//line.*||' -e 's/yyEofCode/yyEOFCode/' $(VENDOR_TIDB)/parser/parser.go; \
	elif [ $(ARCH) = $(MAC) ]; \
	then \
		/usr/bin/sed -i "" 's|//line.*||' $(VENDOR_TIDB)/parser/parser.go; \
		/usr/bin/sed -i "" 's/yyEofCode/yyEOFCode/' $(VENDOR_TIDB)/parser/parser.go; \
	fi

	@awk 'BEGIN{print "// Code generated by goyacc"} {print $0}' $(VENDOR_TIDB)/parser/parser.go > tmp_parser.go && mv tmp_parser.go $(VENDOR_TIDB)/parser/parser.go;

parserlib: $(VENDOR_TIDB)/parser/parser.go

$(VENDOR_TIDB)/parser/parser.go: $(VENDOR_TIDB)/parser/parser.y
	make parser

$(VENDOR_TIDB)/parser/parser.y: vendor

vendor:
	$(GO) mod vendor
	sh ./hack/clean_vendor.sh
